apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: prometheus
  labels:
    app: datavirtualization
    syndesis.io/app: datavirtualization
    syndesis.io/type: infrastructure
parameters:
- name: ROUTE_HOSTNAME
  description: The external hostname to access Data Integration
- name: OPENSHIFT_PROJECT
  description: The name of the OpenShift project Data Integration is being deployed into.
  displayName: OpenShift project to deploy into
  required: true
- description: Registry from where to fetch Syndesis images
  displayName: Syndesis Image Registry
  name: SYNDESIS_REGISTRY
  value: 'docker.io'
- description: Volume space available for Prometheus data, e.g. 512Mi, 2Gi.
  displayName: Prometheus Volume Capacity
  name: PROMETHEUS_VOLUME_CAPACITY
  value: 1Gi
  required: true
- description: Maximum amount of memory the Prometheus container can use.
  displayName: Memory Limit
  name: PROMETHEUS_MEMORY_LIMIT
  value: 512Mi
  required: true
message: |-
  Prometheus is deployed to ${ROUTE_HOSTNAME}.
objects:
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    name: prometheus
    labels:
      app: datavirtualization
      syndesis.io/app: datavirtualization
      syndesis.io/type: infrastructure
      syndesis.io/component: di-prometheus
  spec:
    tags:
    - from:
        kind: DockerImage
        name: ${SYNDESIS_REGISTRY}/prom/prometheus:v2.1.0
      importPolicy:
        scheduled: true
      name: "v2.1.0"
- apiVersion: authorization.openshift.io/v1
  kind: RoleBinding
  metadata:
    name: syndesis:viewers
    labels:
      app: datavirtualization
      syndesis.io/app: datavirtualization
      syndesis.io/type: infrastructure
  roleRef:
    name: view
  subjects:
  - kind: ServiceAccount
    name: di-prometheus
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: di-prometheus
    labels:
      app: datavirtualization
      syndesis.io/app: datavirtualization
      syndesis.io/type: infrastructure
      syndesis.io/component: di-prometheus
- apiVersion: v1
  kind: ConfigMap
  metadata:
    labels:
      app: datavirtualization
      syndesis.io/app: datavirtualization
      syndesis.io/type: infrastructure
      syndesis.io/component: di-prometheus
    name: di-prometheus-config
  data:
    prometheus.yml: |-
      global:
        scrape_interval:     5s
        evaluation_interval: 5s

      scrape_configs:
        - job_name: prometheus
          static_configs:
            - targets:
              - localhost:9090

          metric_relabel_configs:
          - source_labels: [__name__]
            regex: go_(.+)
            action: drop
          - source_labels: [__name__]
            regex: http_(.+)
            action: drop
          - source_labels: [__name__]
            regex: net_(.+)
            action: drop
          - source_labels: [__name__]
            regex: process_(.+)
            action: drop
          - source_labels: [__name__]
            regex: prometheus_(.+)
            action: drop
          - source_labels: [__name__]
            regex: tsdb_(.+)
            action: drop

        - job_name: integration-pods

          kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - ${OPENSHIFT_PROJECT}

          relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_label_syndesis_io_type]
            action: keep
            regex: (integration|datavirtualization)
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - action: labelmap
            regex: __meta_kubernetes_pod_annotation_(syndesis.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name
          metric_relabel_configs:
          - source_labels: [__name__]
            regex: (org_teiid_PercentBufferDiskSpaceInUse|org_teiid_TotalRequestsProcessed|org_teiid_SessionCount|org_teiid_WaitingRequestsCount)
            action: keep

- apiVersion: v1
  kind: Service
  metadata:
    name: di-prometheus
    labels:
      app: datavirtualization
      syndesis.io/app: datavirtualization
      syndesis.io/type: infrastructure
      syndesis.io/component: di-prometheus
  spec:
    ports:
    - name: prometheus
      port: 80
      protocol: TCP
      targetPort: 9090
    selector:
      app: datavirtualization
      syndesis.io/app: datavirtualization
      syndesis.io/component: di-prometheus
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: di-prometheus
    labels:
      app: datavirtualization
      syndesis.io/app: datavirtualization
      syndesis.io/type: infrastructure
      syndesis.io/component: di-prometheus
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${PROMETHEUS_VOLUME_CAPACITY}
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    name: di-prometheus
    labels:
      app: datavirtualization
      syndesis.io/app: datavirtualization
      syndesis.io/type: infrastructure
      syndesis.io/component: di-prometheus
  spec:
    replicas: 1
    selector:
      app: datavirtualization
      syndesis.io/app: datavirtualization
      syndesis.io/component: di-prometheus
    strategy:
      type: Recreate
      resources:
        limits:
          memory: "256Mi"
        requests:
          memory: "20Mi"
    template:
      metadata:
        labels:
          app: datavirtualization
          syndesis.io/app: datavirtualization
          syndesis.io/type: infrastructure
          syndesis.io/component: di-prometheus
      spec:
        serviceAccountName: di-prometheus
        containers:
        - name: prometheus
          image: ' '

          imagePullPolicy: IfNotPresent
          args:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.retention=30d'
          livenessProbe:
            httpGet:
              port: 9090
            initialDelaySeconds: 60
          ports:
          - containerPort: 9090
          readinessProbe:
            httpGet:
              port: 9090
            initialDelaySeconds: 30
          # DB QoS class is "Guaranteed" (requests == limits)
          # Note: On OSO there is no Guaranteed class, its always burstable
          resources:
            limits:
              memory: ${PROMETHEUS_MEMORY_LIMIT}
            requests:
              memory: ${PROMETHEUS_MEMORY_LIMIT}
          volumeMounts:
          - name: di-prometheus-data
            mountPath: /prometheus
          - name: di-prometheus-config
            mountPath: /etc/prometheus
        volumes:
        - name: di-prometheus-data
          persistentVolumeClaim:
            claimName: di-prometheus
        - name: di-prometheus-config
          configMap:
            name: di-prometheus-config
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - prometheus
        from:
          kind: ImageStreamTag
          name: prometheus:v2.1.0
          namespace: ${OPENSHIFT_PROJECT}
      type: ImageChange

    - type: ConfigChange

